#!/usr/bin/env python
''' 

run-kallisto.py by Rohan Maddamsetti. 

on Helen's lab computer, run 'conda activate rohan' first.

This script does two tasks.
1) make FASTA file of all ORFs in REL606.
2) concatenates RNAseq fastq files by genome and biological replicate.
NOTE: this will run on my office computer-- not on my laptop.

We want to run kallisto using both the reference S288c transcriptome from Ensembl (downloaded via the kallisto github)
as well as the transcriptomes that I generated using generate-transcriptomes.py.

'''

from os.path import join, expanduser, exists, basename
from os import makedirs, listdir
import subprocess

def kallisto_index_cmd(datadir, outdir, genome):
    fasta_transcriptome = genome + "_transcriptome.fa"
    fasta_transcriptome_f = join(datadir, fasta_transcriptome)
    indexname = genome + "_transcriptome.idx"
    index_f = join(outdir, indexname)
    cmd = "kallisto index --i " + index_f + " " + fasta_transcriptome_f
    print(cmd)
    return cmd

def run_kallisto_index(projdir):
    ''' index the transcriptomes generated by generate-transcriptomes.py.'''
    ## generate kallisto indices for the transcriptomes for each strain.
    fasta_transcriptomedir = join(projdir, "results", "transcriptomes")
    indexdir = join(projdir, "results", "kallisto-indexes")
    
    for genome in ['HMY12', 'HMY127', 'HMY362']:
        icmd = kallisto_index_cmd(fasta_transcriptomedir, indexdir, genome)
        print(icmd)
        outf = icmd.split()[-2]
        if not exists(outf):
            subprocess.run(icmd,shell=True,executable='/bin/bash')

def generate_kallisto_quant_cmds(projdir, outdir, genome, transcriptome_f):
    cmd_strings = []
    rnaseq_datadir = join(projdir,genome,'RNAData')
    illumina_runs = [join(rnaseq_datadir,x) for x in listdir(rnaseq_datadir) if not x.startswith('.')]
    for rnaseq_run in illumina_runs:
        input_file_list = [join(rnaseq_run,x) for x in listdir(rnaseq_run) if x.endswith('.fastq.gz')]
        sample_names = set([basename(x).split('_')[0] for x in input_file_list])
        assert len(sample_names) == 1 ## should only be one sample per run!
        input_files = ['<(gzcat ' + x + ')' for x in input_file_list]
        input_fstring = ' '.join(input_files)
        output_file = join(outdir,'HMY'+sample_names.pop())
        cmd = 'kallisto quant -i ' + transcriptome_f + ' -o ' + output_file + ' -b 100 ' + input_fstring
        cmd_strings.append(cmd)
    return cmd_strings

def kallisto_quant_cmds_given_transcriptome_index(projdir, outdir, transcriptome_f):
    cmd_strings = []
    for genome in ['HMY12', 'HMY127', 'HMY362']:
        cmd_list = generate_kallisto_quant_cmds(projdir, outdir, genome, transcriptome_f)
        cmd_strings = cmd_strings + cmd_list
    return cmd_strings

def S288c_kallisto_quant_cmds(projdir, outdir):
    transcriptome_f = join(projdir,'saccharomyces_cerevisiae/transcriptome.idx')
    return kallisto_quant_cmds_given_transcriptome_index(projdir, outdir, transcriptome_f)

def HMY_kallisto_quant_cmds(projdir, outdir, genome):
    assert genome in ["HMY12", "HMY127", "HMY362"]
    transcriptome = genome + "_transcriptome.idx"
    transcriptome_f = join(projdir, "results", "kallisto-indexes", transcriptome)
    return kallisto_quant_cmds_given_transcriptome_index(projdir, outdir, transcriptome_f)

def HMY12_kallisto_quant_cmds(projdir, outdir):
    return HMY_kallisto_quant_cmds(projdir, outdir, "HMY12")

def HMY127_kallisto_quant_cmds(projdir, outdir):
    return HMY_kallisto_quant_cmds(projdir, outdir, "HMY127")

def HMY362_kallisto_quant_cmds(projdir, outdir):
    return HMY_kallisto_quant_cmds(projdir, outdir, "HMY362")

def run_quant_cmds(cmds):
    for qcmd in cmds:
        outdir = qcmd.split()[5]
        ## only run kallisto quant if the outdir doesn't exist.
        if not exists(outdir):
            makedirs(outdir)
            print(qcmd)
            subprocess.run(qcmd,shell=True,executable='/bin/bash')

def run_kallisto_quant(projdir, ref):
    assert ref in ["S288c", "HMY12", "HMY127", "HMY362"]
    kallisto_analysis_dir = join(projdir,"results", strain + "-ref-kallisto-output")
    if not exists(kallisto_analysis_dir):
        makedirs(kallisto_analysis_dir)
    if ref == "S288c":
        quant_cmds = S288c_kallisto_quant_cmds(projdir, kallisto_analysis_dir)
    elif ref == "HMY12":
        quant_cmds = HMY12_kallisto_quant_cmds(projdir, kallisto_analysis_dir)
    elif ref == "HMY127":
        quant_cmds = HMY127_kallisto_quant_cmds(projdir, kallisto_analysis_dir)
    elif ref == "HMY362":
        quant_cmds = HMY362_kallisto_quant_cmds(projdir, kallisto_analysis_dir)
    else:
        raise Exception("Unknown strain:", strain)
    run_quant_cmds(quant_cmds)
            
def main():
    homedir = expanduser("~")
    projdir = join(homedir,"Desktop/Rohan-RNA-Seq")

    ## here for reference but not used-- I just use the premade transcriptome index matching this file.
    ensembl_transcriptome_f = 'Saccharomyces_cerevisiae.R64-1-1.cdna.all.fa'

    ## index the updated transcriptomes generated by generate-transcriptomes.py.
    run_kallisto_index(projdir)
    
    ## run kallisto using each reference transcriptome in turn for all strains.
    run_kallisto_quant(projdir, "S288c")
    run_kallisto_quant(projdir, "HMY12")
    run_kallisto_quant(projdir, "HMY127")
    run_kallisto_quant(projdir, "HMY362")
    
main()
